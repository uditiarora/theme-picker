{"version":3,"sources":["components/ColorPicker.js","components/ColorPaletteSingle.js","components/ColorPalette.js","components/ThemePicker.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","state","tab_color","handleColorChange","color","setState","hex","className","this","onChangeComplete","style","background","height","Component","ColorPaletteSingle","props","colors","ColorPalette","data","map","data_items","key","ThemePicker","activeClass","to","spy","smooth","offset","duration","onSetActive","console","log","fontSize","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"m9DA8BeA,G,kNA1BXC,MAAQ,CACJC,UAAW,Q,EAEfC,kBAAoB,SAACC,GACjB,EAAKC,SAAS,CAACH,UAAWE,EAAME,O,wEAGhC,OACI,yBAAKC,UAAU,UACX,kBAAC,eAAD,CAAcA,UAAU,YACpBH,MAASI,KAAKP,MAAMC,UACpBO,iBAAoBD,KAAKL,oBAG7B,6BAEA,yBAAKI,UAAU,mBAAkBG,MAAS,CAClCC,WAAYH,KAAKP,MAAMC,UACvBU,OAAQ,W,GAnBNC,c,gBC4BXC,MA5Bf,SAA4BC,GACxB,OACI,yBAAKR,UAAU,oBACX,yBAAKA,UAAU,UAAUG,MAAS,CAClCC,WAAYI,EAAMC,OAAO,GACzBZ,MAAOW,EAAMC,OAAN,YAFP,IAGMD,EAAMC,OAAO,GAHnB,KAIA,yBAAKT,UAAU,UAAUG,MAAS,CAClCC,WAAYI,EAAMC,OAAO,GACzBZ,MAAOW,EAAMC,OAAN,YAFP,IAGMD,EAAMC,OAAO,GAHnB,KAIA,yBAAKT,UAAU,UAAUG,MAAS,CAClCC,WAAYI,EAAMC,OAAO,GACzBZ,MAAOW,EAAMC,OAAN,YAFP,IAGMD,EAAMC,OAAO,GAHnB,KAIA,yBAAKT,UAAU,UAAUG,MAAS,CAClCC,WAAYI,EAAMC,OAAO,GACzBZ,MAAOW,EAAMC,OAAN,YAFP,IAGMD,EAAMC,OAAO,GAHnB,KAIA,yBAAKT,UAAU,UAAUG,MAAS,CAClCC,WAAYI,EAAMC,OAAO,GACzBZ,MAAOW,EAAMC,OAAN,YAFP,IAGMD,EAAMC,OAAO,GAHnB,OCRGC,MAXf,WAEI,OACI,yBAAKV,UAAU,OACVW,EAAKC,KAAI,SAACC,GACP,OAAO,yBAAKb,UAAU,YAAW,kBAAC,EAAD,CAAoBS,OAAQI,EAAYC,IAAKD,EAAU,W,0BCuCzFE,MAxCf,WAII,OACI,6BACI,yBAAKf,UAAY,SACjB,yBAAKA,UAAY,mBACb,6BACI,uBAAGA,UAAU,gBAAe,+CAC5B,uBAAGA,UAAU,UAAS,+DAE1B,6BACA,yBAAKA,UAAU,gBACP,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAER,6BACI,uBAAGA,UAAU,UAAS,wEACtB,kBAAC,OAAD,CAAMgB,YAAY,SAASC,GAAG,QAAQC,KAAK,EAAMC,QAAQ,EAAMC,OAAQ,GAAIC,SAAU,IAAKC,YArB3G,SAAyBL,GACpBM,QAAQC,IAAIP,KAqBI,yBAAMjB,UAAU,eAAc,kBAAC,IAAD,CAAgBA,UAAY,UAAUG,MAAO,CAAEsB,SAAU,MAAvF,SAMZ,6BACA,kBAAC,UAAD,CAASC,KAAK,SACV,yBAAK1B,UAAU,SACZ,yBAAKA,UAAU,aAAY,kBAAC,EAAD,MAA3B,UC5BJ2B,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.8c72a84f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {SketchPicker} from 'react-color';\r\nimport '../css/ColorPicker.css';\r\nclass ColorPicker extends Component{\r\n    state = {\r\n        tab_color: '#fff'\r\n    };\r\n    handleColorChange = (color) => {\r\n        this.setState({tab_color: color.hex});\r\n    };\r\n    render(){\r\n        return(\r\n            <div className=\"col-sm\">\r\n                <SketchPicker className=\"col-sm-12\"\r\n                    color = {this.state.tab_color}\r\n                    onChangeComplete = {this.handleColorChange}\r\n\r\n                />\r\n                <br>\r\n                </br>\r\n                <div className=\"col-sm-10 shadow\"style = {{\r\n                        background: this.state.tab_color,\r\n                        height: 75\r\n                    }}\r\n                >\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default ColorPicker;","import React from 'react';\r\nimport '../css/ColorPaletteSingle.css';\r\n\r\nfunction ColorPaletteSingle(props){\r\n    return(\r\n        <div className=\"paletteContainer\">\r\n            <div className=\"palette\" style = {{\r\n            background: props.colors[\"1\"],\r\n            color: props.colors[\"textColor\"]\r\n            }} > {props.colors[\"1\"]} </div>\r\n            <div className=\"palette\" style = {{\r\n            background: props.colors[\"2\"],\r\n            color: props.colors[\"textColor\"]\r\n            }} > {props.colors[\"2\"]} </div>\r\n            <div className=\"palette\" style = {{\r\n            background: props.colors[\"3\"],\r\n            color: props.colors[\"textColor\"]\r\n            }} > {props.colors[\"3\"]} </div>\r\n            <div className=\"palette\" style = {{\r\n            background: props.colors[\"4\"],\r\n            color: props.colors[\"textColor\"]\r\n            }} > {props.colors[\"4\"]} </div>\r\n            <div className=\"palette\" style = {{\r\n            background: props.colors[\"5\"],\r\n            color: props.colors[\"textColor\"]\r\n            }} > {props.colors[\"5\"]} </div>\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default ColorPaletteSingle;","import React from 'react';\r\nimport data from '../data/data.json';\r\nimport ColorPaletteSingle from './ColorPaletteSingle';\r\nfunction ColorPalette(){\r\n    \r\n    return(\r\n        <div className=\"row\">\r\n            {data.map((data_items) => {\r\n                return <div className=\"col-sm-3\"><ColorPaletteSingle colors={data_items} key={data_items[\"id\"]}/></div>\r\n            })}\r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default ColorPalette;","import React from 'react';\r\nimport '../css/ThemePicker.css';\r\nimport ColorPicker from './ColorPicker';\r\nimport ColorPalette from './ColorPalette';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport * as Scroll from 'react-scroll';\r\nimport { Link, Element , Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll'\r\nfunction ThemePicker() {\r\n   function handleSetActive(to) {\r\n        console.log(to);\r\n    };\r\n    return(\r\n        <div>\r\n            <div className = \"main \">\r\n            <div className = \"container-fluid\">\r\n                <div>\r\n                    <p className=\"text1 script\"><span>Theme Picker</span></p>\r\n                    <p className=\"script\"><span>5 colors are all you need !</span></p>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"row row-flex\">\r\n                        <ColorPicker />\r\n                        <ColorPicker />\r\n                        <ColorPicker />\r\n                        <ColorPicker />\r\n                        <ColorPicker />\r\n                </div>\r\n                <div>\r\n                    <p className=\"script\"><span>Scroll down to see some of our themes</span></p>   \r\n                    <Link activeClass=\"active\" to=\"test1\" spy={true} smooth={true} offset={50} duration={500} onSetActive={handleSetActive}>\r\n                        <div  className=\"scroll-down\"><ExpandMoreIcon className = \"my_icon\" style={{ fontSize: 80 }}/> </div>\r\n                    </Link>\r\n                    \r\n                </div>    \r\n            </div>            \r\n            </div>\r\n            <div>\r\n            <Element name=\"test1\" >\r\n                <div className=\"main2\" > \r\n                   <div className=\"container\"><ColorPalette /> </div>\r\n                </div>\r\n            </Element>\r\n            </div>\r\n        </div>\r\n            \r\n    );\r\n}\r\nexport default ThemePicker;","import React from 'react';\nimport './App.css';\nimport ThemePicker from './components/ThemePicker';\nfunction App() {\n  return (\n    <div>\n      <ThemePicker />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}